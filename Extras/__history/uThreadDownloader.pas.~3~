unit uThreadDownloader;

interface

uses
  System.Classes, IdHTTP, Winapi.Windows, System.SysUtils, IdComponent, Winapi.Messages;

const
  WM_DOWNLOADFILE=WM_USER + 202;
type
  TDownLoadFileThread = class(TThread)
  private
    { Private declarations }
    IdHttp: TIdHTTP;
         FParentHandle: THandle;//The handle of the parent form, used to send messages
    FRefreshProgress: Boolean;
    FUrl,FSaveFilePath: string;
    BytesToTransfer: LongWord;
    FPausedDown: Boolean;
         FOpenFile: Boolean; //Total download size
    function GetURLFileName(aURL: string): string;
    procedure IdHTTPWork(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCount: Int64);
    procedure IdHTTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCountMax: Int64);
    procedure IdHTTPWorkEnd(Sender: TObject; AWorkMode: TWorkMode);
    procedure HttpDownLoad(aURL, aFile: string; bResume: Boolean);
  protected
    procedure Execute; override;
  public
    /// <summary>
         /// <param name="AUrl">File to download</param>
         /// <param name="ASaveFilePath"> file path to be saved (absolute path)</param>
         /// <param name="AParentHandle">Producer form handle, used to update the form, can pass 0</param>
         /// <param name="ARefreshProgress">Do you want to update the progress bar and other UI</param>
         /// <param name="AParentHandle">Whether the thread hangs</param>
    /// </summary>
    constructor Create(AUrl,ASaveFilePath: string;AParentHandle: THandle; ARefreshProgress: Boolean; CreateSuspended: Boolean=False);
    destructor Destroy; override;
    /// <summary>
         /// Pause download
    /// </summary>
    property PausedDown: Boolean read FPausedDown write FPausedDown;
    /// <summary>
         /// Whether to open the downloaded file
    /// </summary>
    property OpenFile: Boolean read FOpenFile Write FOpenFile;
  end;

implementation
  uses Winapi.ActiveX, System.Win.ComObj;

{ TDownLoadFileThread }

constructor TDownLoadFileThread.Create(AUrl,ASaveFilePath: string; AParentHandle: THandle;
  ARefreshProgress, CreateSuspended: Boolean);
begin
  inherited Create(CreateSuspended);
  IdHTTP := TIdHTTP.Create(nil);
  FUrl := AUrl;
  FSaveFilePath := ASaveFilePath;
  FParentHandle := AParentHandle;
  FRefreshProgress := ARefreshProgress;
  FreeOnTerminate := True;
  IdHTTP.OnWork := IdHTTPWork;
  IdHTTP.OnWorkBegin := IdHTTPWorkBegin;
  IdHTTP.OnWorkEnd := IdHTTPWorkEnd;
  IdHTTP.ConnectTimeout := 5000;
  IdHTTP.ReadTimeout := 10000
end;

destructor TDownLoadFileThread.Destroy;
begin
  IdHTTP.Disconnect;
  FreeAndNil(IdHTTP);
  inherited;
end;

procedure TDownLoadFileThread.Execute;
var
  aFile: string;
begin
  { Place thread code here }
     aFile := GetURLFileName(FURL); //Get the file name, for example "test.exe"
  if not DirectoryExists(FSaveFilePath) then
    ForceDirectories(FSaveFilePath);
  if FileExists(FSaveFilePath + aFile) then
    HttpDownLoad(FUrl, FSaveFilePath + aFile, True)
  else
    HttpDownLoad(FUrl, FSaveFilePath + aFile, False);
end;

function TDownLoadFileThread.GetURLFileName(aURL: string): string;
var
  i: integer;
  s: string;
 begin //Return the file name of the download address
  s := aURL;
  i := Pos('/', s);
     while i <> 0 do //Remove the content before "/" and the rest is the file name
  begin
    Delete(s, 1, i);
    i := Pos('/', s);
  end;
  Result := s;
end;

procedure TDownLoadFileThread.HttpDownLoad(aURL, aFile: string;
  bResume: Boolean);
var
  tStream: TFileStream;
  newUrl: string;
  wholeSize, fileSize, needDown: Int64;
 begin //Http download
  newUrl := IdHTTP.URL.URLEncode(aUrl);
  try
         IdHttp.HandleRedirects := True; //Redirect
    IdHttp.Request.Range := '';
    IdHttp.Head(newUrl);
         wholeSize := IdHttp.Response.ContentLength;//Get file size
    if wholeSize <= 0 then
      Exit;
         if FileExists(aFile) then //if the file already exists
    begin
      tStream := TFileStream.Create(aFile, fmOpenWrite);
      try
        fileSize := tStream.Size;
                 //The size is inconsistent, indicating that the file is damaged or updated, delete and re-download
        if wholeSize <> fileSize then
        begin
          FreeAndNil(tStream);
          DeleteFile(aFile);
        end
        else
        begin
                     //There is already the same file locally, send the download complete message directly
          if FOpenFile then
          begin
            FreeAndNil(tStream);
                         //Before sending a message, remember to free the Stream first, otherwise it will cause an error due to occupation: Invalid operation point
            SendMessage(FParentHandle, WM_DOWNLOADFILE, 99, Integer(aFile));
          end;
          Exit;
        end;
      finally
        if Assigned(tStream) then
          FreeAndNil(tStream);
      end;
    end;
    try
      if FileExists(aFile+'.tmp') then
      begin
        tStream:=TFileStream.Create(aFile+'.tmp',fmOpenWrite);
        if tStream.Size>wholeSize then
        begin
          FreeAndNil(tStream);
          DeleteFile(aFile+'.tmp');
        end
        else if tStream.Size = wholeSize then
        begin
                     //Exact bytes are the same, indicating that the download has been completed, modify the file name
          FreeAndNil(tStream);
          RenameFile(afile + '.tmp', aFile);
          if FOpenFile then
            SendMessage(FParentHandle, WM_DOWNLOADFILE, 99, Integer(aFile));
          Exit;
        end;
      end
      else
        tStream:=TFileStream.Create(aFile+'.tmp',fmCreate);
      tStream.Seek(0, soEnd);
      fileSize := tStream.Size;
      needDown := wholeSize - filesize;

      if needDown > 0 then
      begin
        if fileSize > 0 then
                     IdHTTP.Request.Range := IntToStr(fileSize)+'-' +IntToStr(wholeSize);//Note: Some download servers do not support this writing method, which will cause errors in the resume of the breakpoint
        IdHTTP.Get(newUrl, tStream);
                 //If the file size is the same, the download is complete
                 // Otherwise it may be the end caused by the pause
        if tStream.Size = wholeSize then
        begin
          FreeAndNil(tStream);
          RenameFile(afile + '.tmp', aFile);
          if FOpenFile then
            SendMessage(FParentHandle, WM_DOWNLOADFILE, 99, Integer(aFile));
        end;
      end;
    finally
      if Assigned(tStream) then
        FreeAndNil(tStream);
    end;
  except on e:Exception do
  begin
         //download failed
    SendMessage(FParentHandle, WM_DOWNLOADFILE, -1, 0);
 // log4Debug('File download failed: ('+ aFile+')' + e.Message);
  end;
  end;

end;

procedure TDownLoadFileThread.IdHTTPWork(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCount: Int64);
begin
  if PausedDown then
     begin //Interrupt download
    IdHTTP.Disconnect;
  end;
  if FRefreshProgress then
         SendMessage(FParentHandle, WM_DOWNLOADFILE, 2, AWorkCount);//Send a message to inform the download progress
end;

procedure TDownLoadFileThread.IdHTTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCountMax: Int64);
var
  iMax: Integer;
begin
  PausedDown := False;
  if not FRefreshProgress then Exit;
  if AWorkCountMax > 0 then
    iMax := AWorkCountMax
  else
    iMax := BytesToTransfer;
     SendMessage(FParentHandle, WM_DOWNLOADFILE, 1, iMax);//When a message occurs, notify the main window to start downloading
end;

procedure TDownLoadFileThread.IdHTTPWorkEnd(Sender: TObject;
  AWorkMode: TWorkMode);
begin

end;

end.
